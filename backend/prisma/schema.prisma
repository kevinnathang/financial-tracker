// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password_hash        String
  balance              Decimal               @default(0) @db.Decimal(12, 2)
  full_name            String
  created_at           DateTime              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime              @updatedAt @db.Timestamptz(6)
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  
  transactions         Transaction[]
  periodicTransactions PeriodicTransaction[]
  financialGeopoints   FinancialGeopoint[]
  
  @@map("users")
}

model Tag {
  id                   String                @id @default(uuid())
  name                 String                @unique
  icon                 String?
  color                String                @db.VarChar(7)
  created_at           DateTime              @default(now()) @db.Timestamptz(6)
  
  transactions         Transaction[]
  periodicTransactions PeriodicTransaction[]
  financialGeopoints   FinancialGeopoint[]
  
  @@map("tags")
}

model Transaction {
  id                    String             @id @default(uuid())
  user                  User               @relation(fields: [user_id], references: [id])
  user_id               String
  tag                   Tag?               @relation(fields: [tag_id], references: [id])
  tag_id                String?
  financialGeopoint     FinancialGeopoint? @relation(fields: [financial_geopoint_id], references: [id])
  financial_geopoint_id String?
  amount                Decimal            @db.Decimal(12, 2)
  type                  String             @db.VarChar(20)
  description           String?            @db.Text
  date                  DateTime           @db.Timestamptz(6)
  created_at            DateTime           @default(now()) @db.Timestamptz(6)
  
  @@index([user_id])
  @@index([tag_id])
  @@index([date])
  @@map("transactions")
}

model PeriodicTransaction {
  id                    String             @id @default(uuid())
  user                  User               @relation(fields: [user_id], references: [id])
  user_id               String
  tag                   Tag?               @relation(fields: [tag_id], references: [id])
  tag_id                String?
  financialGeopoint     FinancialGeopoint? @relation(fields: [financial_geopoint_id], references: [id])
  financial_geopoint_id String?
  amount                Decimal            @db.Decimal(12, 2)
  type                  String             @db.VarChar(20)
  description           String?            @db.Text
  frequency             String             @db.VarChar(20)  
  start_date            DateTime           @db.Date         
  end_date              DateTime?          @db.Date         
  last_processed_date   DateTime?          @db.Date         
  created_at            DateTime           @default(now()) @db.Timestamptz(6)
  updated_at            DateTime           @updatedAt @db.Timestamptz(6)
  
  @@index([user_id])
  @@index([tag_id])
  @@map("periodic_transactions")
}

model FinancialGeopoint {
  id             String            @id @default(uuid())
  name           String
  type           String            @db.VarChar(20)
  location       Json              // Will store GeoJSON Point format
  address        String?           @db.Text
  tag_id         String?
  user_id        String
  created_at     DateTime          @default(now()) @db.Timestamptz(6)
  
  user           User              @relation(fields: [user_id], references: [id])
  tag            Tag?              @relation(fields: [tag_id], references: [id])
  
  transactions         Transaction[]
  periodicTransactions PeriodicTransaction[]
  
  @@index([user_id])
  @@index([tag_id])
  @@map("financial_geopoints")
}